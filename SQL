create database db2025;
show databases;

use db2025;

select * from table1;

select * from table2;

CREATE TABLE table3 AS
SELECT 
    t1.name, 
    t1.age, 
    t1.city, 
    t1.zipcode, 
    t1.phone AS phone_table1, 
    t1.state_code AS state_code_table1, 
    t1.order_id AS order_id_table1,
    t2.state_code AS state_code_table2, 
    t2.county, 
    t2.order_date, 
    t2.phone AS phone_table2, 
    t2.order_id AS order_id_table2
FROM 
    table1 t1
JOIN 
    table2 t2
ON 
    t1.state_code = t2.state_code
    AND t1.name = t2.name;
    
    select * from table3;

select count(*) from table3;

drop table table3;

CREATE TABLE table3 AS
SELECT 
    t1.name,
    t1.age,
    t1.city,
    t1.zipcode,
    t1.phone,
    t1.state_code,
    t1.order_id AS order_id_table1,
    t2.County,
    t2.order_date,
    t2.order_id AS order_id_table2
FROM table1 t1
JOIN table2 t2
ON t1.state_code = t2.state_code AND t1.name = t2.name;

select * from table3;

drop table table3;

CREATE TABLE table3 AS 
SELECT t1.state_code AS state_code_t1, t1.name AS name_t1, 
t1.age, t1.city,t1.zipcode,t1.phone as phone_t1,t1.order_id as order_id_t1,
 t2.state_code AS state_code_t2, t2.name AS name_t2, 
 t2.county,t2.order_date,t2.phone as phone_t2,t2.order_id as order_id_t2
FROM table1 AS t1
LEFT JOIN table2 AS t2
ON t1.state_code = t2.state_code AND t1.name = t2.name
UNION
SELECT t1.state_code AS state_code_t1, t1.name AS name_t1,t1.age, t1.city,t1.zipcode,
t1.phone as phone_t1,t1.order_id as order_id_t1,
 t2.state_code AS state_code_t2, t2.name AS name_t2,  t2.county,
 t2.order_date ,t2.phone as phone_t2 ,t2.order_id as order_id_t2
FROM table1 AS t1
RIGHT JOIN table2 AS t2
ON t1.state_code = t2.state_code AND t1.name = t2.name;

select * from table1;

select count(*) from  table3;

CREATE TABLE table_matched_rows AS 
SELECT t1.state_code AS state_code_t1, t1.name AS name_t1, 
t1.age, t1.city,t1.zipcode,t1.phone as phone_t1,t1.order_id as order_id_t1,
 t2.state_code AS state_code_t2, t2.name AS name_t2, 
 t2.county,t2.order_date,t2.phone as phone_t2,t2.order_id as order_id_t2
FROM table1 AS t1
 JOIN table2 AS t2
ON t1.state_code = t2.state_code AND t1.name = t2.name;

select * from table_matched_rows;

show tables;

select * from table3;

/*Task5:
From table 3, write sql queries to do the following.

a) Create a table table5 with records from states TX, CA, AZ, NY, FL*/

CREATE TABLE Table5 AS
SELECT *
FROM Table3
WHERE state_code_t1 IN ('TX', 'CA', 'AZ', 'NY', 'FL')
   OR state_code_t2 IN ('TX', 'CA', 'AZ', 'NY', 'FL');
   
   
   
   SELECT * FROM TABLE5;
   
   SELECT COUNT(*) FROM TABLE5;
   
   /*
b) To find the State with most orders using order_id*/

SELECT state_code, COUNT(order_id) AS total_orders
FROM (
    SELECT state_code_t1 AS state_code, order_id_t1 AS order_id FROM Table3
    UNION ALL
    SELECT state_code_t2 AS state_code, order_id_t2 AS order_id FROM Table3
) AS combined_states
GROUP BY state_code
ORDER BY total_orders DESC
LIMIT 1;

/*c) To find the State with most orders by Year using order_id */

SELECT year, state_code, MAX(total_orders) AS most_orders
FROM (
    SELECT 
        EXTRACT(YEAR FROM order_date) AS year, 
        state_code, 
        COUNT(order_id) AS total_orders
    FROM (
        SELECT 
            state_code_t1 AS state_code, 
            order_date, 
            order_id_t1 AS order_id
        FROM Table3
        UNION ALL
        SELECT 
            state_code_t2 AS state_code, 
            order_date, 
            order_id_t2 AS order_id
        FROM Table3
    ) AS combined_states
    GROUP BY year, state_code
) AS orders_by_state
GROUP BY year, state_code
ORDER BY year, most_orders DESC;

/*To find the State with most orders by Year and also City using order_id */

WITH OrdersPerState AS (
    SELECT
        YEAR(order_date) AS order_year,
        state_code_t1 AS state,
        COUNT(order_id_t1) AS total_orders
    FROM
        table3
    GROUP BY
        YEAR(order_date), state_code_t1
),
StateWithMostOrders AS (
    SELECT
        order_year,
        state,
        total_orders,
        RANK() OVER (PARTITION BY order_year ORDER BY total_orders DESC) AS rank_state
    FROM
        OrdersPerState
),
OrdersPerCity AS (
    SELECT
        YEAR(order_date) AS order_year,
        state_code_t1 AS state,
        city,
        COUNT(order_id_t1) AS total_orders
    FROM
        table3
    GROUP BY
        YEAR(order_date), state_code_t1, city
),
CityWithMostOrdersInTopState AS (
    SELECT
        c.order_year,
        c.state,
        c.city,
        c.total_orders,
        RANK() OVER (PARTITION BY c.order_year, c.state ORDER BY c.total_orders DESC) AS rank_city
    FROM
        OrdersPerCity c
    JOIN
        StateWithMostOrders s
    ON
        c.order_year = s.order_year AND c.state = s.state
    WHERE
        s.rank_state = 1
)
SELECT
    s.order_year,
    s.state AS state_with_most_orders,
    c.city AS city_with_most_orders
FROM
    StateWithMostOrders s
JOIN
    CityWithMostOrdersInTopState c
ON
    s.order_year = c.order_year AND s.state = c.state
WHERE
    s.rank_state = 1 AND c.rank_city = 1;
    
    
    
    /*To find the oldest person to have placed more than 10 orders.  If there are no results find the oldest person to have placed more than 3 orders*/
    
    WITH order_counts AS (
    SELECT 
        name,
        age,
        COUNT(order_id) AS total_orders
    FROM (
        SELECT name_t1 AS name, age, order_id_t1 AS order_id FROM Table3
        UNION ALL
        SELECT name_t2 AS name, age, order_id_t2 AS order_id FROM Table3
    ) AS combined_orders
    GROUP BY name, age
),
filtered_orders AS (
    SELECT name, age, total_orders
    FROM order_counts
    WHERE total_orders > 10
    ORDER BY age DESC
    LIMIT 1
),
fallback_orders AS (
    SELECT name, age, total_orders
    FROM order_counts
    WHERE total_orders > 3
    ORDER BY age DESC
    LIMIT 1
)
SELECT * 
FROM filtered_orders
UNION ALL
SELECT * 
FROM fallback_orders
WHERE NOT EXISTS (SELECT 1 FROM filtered_orders);


/*f) Create a query to find the length of the order_id from table 3 and also split it into parts and display the length of each part. 

 Example: bae24f91-3e5a-4bd8-82f3-e584980a09ce , 36, bae24f91, 8, 3e5a, 4, */

SELECT 
    order_id,
    LENGTH(order_id) AS total_length,
    SUBSTRING_INDEX(SUBSTRING_INDEX(order_id, '-', 1), '-', -1) AS part1,
    LENGTH(SUBSTRING_INDEX(SUBSTRING_INDEX(order_id, '-', 1), '-', -1)) AS length_part1,
    SUBSTRING_INDEX(SUBSTRING_INDEX(order_id, '-', 2), '-', -1) AS part2,
    LENGTH(SUBSTRING_INDEX(SUBSTRING_INDEX(order_id, '-', 2), '-', -1)) AS length_part2,
    SUBSTRING_INDEX(SUBSTRING_INDEX(order_id, '-', 3), '-', -1) AS part3,
    LENGTH(SUBSTRING_INDEX(SUBSTRING_INDEX(order_id, '-', 3), '-', -1)) AS length_part3,
    SUBSTRING_INDEX(SUBSTRING_INDEX(order_id, '-', 4), '-', -1) AS part4,
    LENGTH(SUBSTRING_INDEX(SUBSTRING_INDEX(order_id, '-', 4), '-', -1)) AS length_part4,
    SUBSTRING_INDEX(SUBSTRING_INDEX(order_id, '-', 5), '-', -1) AS part5,
    LENGTH(SUBSTRING_INDEX(SUBSTRING_INDEX(order_id, '-', 5), '-', -1)) AS length_part5
FROM (
    SELECT order_id_t1 AS order_id FROM Table3
    UNION ALL
    SELECT order_id_t2 AS order_id FROM Table3
) AS combined_orders;












